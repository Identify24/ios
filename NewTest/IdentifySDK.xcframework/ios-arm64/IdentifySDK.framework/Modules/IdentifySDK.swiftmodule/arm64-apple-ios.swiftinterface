// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.8 (swiftlang-5.8.0.124.2 clang-1403.0.22.11.100)
// swift-module-flags: -target arm64-apple-ios13.1 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name IdentifySDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Alamofire
import Combine
import CommonCrypto
import CoreNFC
import CryptoKit
import CryptoTokenKit
import Foundation
import OpenSSL
import Starscream
import Swift
import UIKit
import Vision
import WebRTC
import _Concurrency
import _StringProcessing
@_hasMissingDesignatedInitializers public class SDKNetworkOptions {
  public var timeoutIntervalForRequest: Swift.Int?
  public var timeoutIntervalForResource: Swift.Int?
  public var useSslPinning: Swift.Bool?
  public init(timeoutIntervalForRequest: Swift.Int?, timeoutIntervalForResource: Swift.Int?, useSslPinning: Swift.Bool?)
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 13, *)
public class TagReader {
  @objc deinit
}
public enum UploadImgType : Swift.String, Swift.Codable {
  case uploadIdFront
  case uploadIdBack
  case uploadSelfie
  case uploadSignature
  case validateAddress
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum OCRType : Swift.String, Swift.Codable {
  case frontId
  case backId
  case passport
  case document
  case selfie
  case signature
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum AppType : Swift.String, Swift.Codable {
  case onlySDK
  case demoApp
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum SDKType : Swift.Int, Swift.Codable {
  case fullProcess
  case withoutCall
  case onlyCall
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum HostType : Swift.String, Swift.Codable {
  case identifyTr
  case custom
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum SdkModules : Swift.String, Swift.Codable {
  case login
  case nfc
  case livenessDetection
  case waitScreen
  case selfie
  case videoRecord
  case idCard
  case signature
  case speech
  case liveView
  case addressConf
  case thankU
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum SelfieTypes : Swift.String, Swift.Codable {
  case selfie
  case oldPhoneFace
  case video
  case backId
  case frontId
  case signature
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum AppQuitType : Swift.String {
  case restartModules
  case onlyCall
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum SDKLogLevel : Swift.String {
  case noLog
  case all
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum VerificationCardType : Swift.String {
  case onlyIdCard
  case all
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum SDKLang : Swift.String {
  case de
  case eng
  case tr
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum CardType : Swift.String {
  case idCard
  case passport
  case oldSchool
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum LivenessTestStep : Swift.String {
  case turnLeft
  case turnRight
  case blinkEyes
  case smile
  case completed
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum SDKCallActions {
  case incomingCall
  case endCall
  case comingSms
  case openNFC
  case skipNFC
  case approveSms(Swift.Bool)
  case openWarningCircle
  case closeWarningCircle
  case openCardCircle
  case closeCardCircle
  case terminateCall
  case imOffline
  case updateQueue(Swift.String, Swift.String)
  case photoTaken(Swift.String)
  case subrejectedDismiss
  case subscribed
  case openNfcRemote(Swift.String, Swift.String, Swift.String)
  case startTransfer
  case networkQuality(Swift.String)
}
public protocol IdentifyListenerDelegate : AnyObject {
  func incomingCall()
  func endCall()
  func comingSms()
  func openNFC()
  func skipNFC()
  func approvedSms(stats: Swift.Bool)
  func openWarningCircle()
  func closeWarningCircle()
  func openCardCircle()
  func closeCardCircle()
  func terminateCall()
  func imOffline()
  func updateQueue(countMember: Swift.String, minutes: Swift.String)
  func photoTaken(message: Swift.String)
  func subrejectedDismiss()
  func subscribed()
  func openNfcRemote(birthDate: Swift.String, expireDate: Swift.String, serialNumber: Swift.String)
}
public protocol PopUpProtocol {
  func handlePopUpAction(action: Swift.Bool)
}
public protocol LoadingViewDelegate {
  func hideAllLoaders()
}
public protocol SDKSocketListener : AnyObject {
  func listenSocketMessage(message: IdentifySDK.SDKCallActions)
}
public protocol IdentifyManagerListener : AnyObject {
  func sdkResponse(stats: IdentifySDK.IdentifyListener)
}
@_hasMissingDesignatedInitializers public class IdentifyListener : Swift.Codable {
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public enum PassportAuthenticationStatus {
  case notDone
  case success
  case failed
  public static func == (a: IdentifySDK.PassportAuthenticationStatus, b: IdentifySDK.PassportAuthenticationStatus) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13, macOS 10.15, *)
public class NFCPassportModel {
  public var documentType: Swift.String {
    get
  }
  public var documentSubType: Swift.String {
    get
  }
  public var documentNumber: Swift.String {
    get
  }
  public var issuingAuthority: Swift.String {
    get
  }
  public var documentExpiryDate: Swift.String {
    get
  }
  public var dateOfBirth: Swift.String {
    get
  }
  public var gender: Swift.String {
    get
  }
  public var nationality: Swift.String {
    get
  }
  public var lastName: Swift.String {
    get
  }
  public var firstName: Swift.String {
    get
  }
  public var passportMRZ: Swift.String {
    get
  }
  public var placeOfBirth: Swift.String? {
    get
  }
  public var residenceAddress: Swift.String? {
    get
  }
  public var phoneNumber: Swift.String? {
    get
  }
  public var personalNumber: Swift.String? {
    get
  }
  public var documentSigningCertificate: IdentifySDK.X509Wrapper? {
    get
  }
  public var countrySigningCertificate: IdentifySDK.X509Wrapper? {
    get
  }
  public var LDSVersion: Swift.String {
    get
  }
  public var dataGroupsPresent: [Swift.String] {
    get
  }
  public var dataGroupsAvailable: [IdentifySDK.DataGroupId] {
    get
  }
  public var dataGroupsRead: [IdentifySDK.DataGroupId : IdentifySDK.DataGroup] {
    get
  }
  public var dataGroupHashes: [IdentifySDK.DataGroupId : IdentifySDK.DataGroupHash] {
    get
  }
  public var cardAccess: IdentifySDK.CardAccess? {
    get
  }
  public var BACStatus: IdentifySDK.PassportAuthenticationStatus {
    get
  }
  public var PACEStatus: IdentifySDK.PassportAuthenticationStatus {
    get
  }
  public var chipAuthenticationStatus: IdentifySDK.PassportAuthenticationStatus {
    get
  }
  public var passportCorrectlySigned: Swift.Bool {
    get
  }
  public var documentSigningCertificateVerified: Swift.Bool {
    get
  }
  public var passportDataNotTampered: Swift.Bool {
    get
  }
  public var activeAuthenticationPassed: Swift.Bool {
    get
  }
  public var activeAuthenticationChallenge: [Swift.UInt8] {
    get
  }
  public var activeAuthenticationSignature: [Swift.UInt8] {
    get
  }
  public var verificationErrors: [any Swift.Error] {
    get
  }
  public var isPACESupported: Swift.Bool {
    get
  }
  public var isChipAuthenticationSupported: Swift.Bool {
    get
  }
  public var passportImage: UIKit.UIImage? {
    get
  }
  public var signatureImage: UIKit.UIImage? {
    get
  }
  public var activeAuthenticationSupported: Swift.Bool {
    get
  }
  public init()
  public init(from dump: [Swift.String : Swift.String])
  public func addDataGroup(_ id: IdentifySDK.DataGroupId, dataGroup: IdentifySDK.DataGroup)
  public func getDataGroup(_ id: IdentifySDK.DataGroupId) -> IdentifySDK.DataGroup?
  public func dumpPassportData(selectedDataGroups: [IdentifySDK.DataGroupId], includeActiveAuthenticationData: Swift.Bool = false) -> [Swift.String : Swift.String]
  public func getHashesForDatagroups(hashAlgorythm: Swift.String) -> [IdentifySDK.DataGroupId : [Swift.UInt8]]
  public func verifyPassport(masterListURL: Foundation.URL?, useCMSVerification: Swift.Bool = false)
  public func verifyActiveAuthentication(challenge: [Swift.UInt8], signature: [Swift.UInt8])
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class DataGroup15 : IdentifySDK.DataGroup {
  public var rsaPublicKey: Swift.OpaquePointer? {
    get
  }
  public var ecdsaPublicKey: Swift.OpaquePointer? {
    get
  }
  @objc deinit
}
@available(iOS 13, *)
public struct ResponseAPDU {
  public var data: [Swift.UInt8]
  public var sw1: Swift.UInt8
  public var sw2: Swift.UInt8
  public init(data: [Swift.UInt8], sw1: Swift.UInt8, sw2: Swift.UInt8)
}
@available(iOS 13, *)
public class PACEHandler {
  public init(cardAccess: IdentifySDK.CardAccess, tagReader: IdentifySDK.TagReader) throws
  public func doPACE(mrzKey: Swift.String, completed: @escaping (Swift.Bool) -> ())
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class DataGroup11 : IdentifySDK.DataGroup {
  public var fullName: Swift.String? {
    get
  }
  public var personalNumber: Swift.String? {
    get
  }
  public var dateOfBirth: Swift.String? {
    get
  }
  public var placeOfBirth: Swift.String? {
    get
  }
  public var address: Swift.String? {
    get
  }
  public var telephone: Swift.String? {
    get
  }
  public var profession: Swift.String? {
    get
  }
  public var title: Swift.String? {
    get
  }
  public var personalSummary: Swift.String? {
    get
  }
  public var proofOfCitizenship: Swift.String? {
    get
  }
  public var tdNumbers: Swift.String? {
    get
  }
  public var custodyInfo: Swift.String? {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class ChipAuthenticationInfo : IdentifySDK.SecurityInfo {
  override public func getObjectIdentifier() -> Swift.String
  override public func getProtocolOIDString() -> Swift.String
  public func getKeyId() -> Swift.Int
  public static func toKeyAgreementAlgorithm(oid: Swift.String) throws -> Swift.String
  public static func toCipherAlgorithm(oid: Swift.String) throws -> Swift.String
  public static func toKeyLength(oid: Swift.String) throws -> Swift.Int
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class NotImplementedDG : IdentifySDK.DataGroup {
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class DataGroup {
  public var datagroupType: IdentifySDK.DataGroupId
  public var body: [Swift.UInt8] {
    get
  }
  public var data: [Swift.UInt8] {
    get
  }
  public func hash(_ hashAlgorythm: Swift.String) -> [Swift.UInt8]
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class DataGroup2 : IdentifySDK.DataGroup {
  public var nrImages: Swift.Int {
    get
  }
  public var versionNumber: Swift.Int {
    get
  }
  public var lengthOfRecord: Swift.Int {
    get
  }
  public var numberOfFacialImages: Swift.Int {
    get
  }
  public var facialRecordDataLength: Swift.Int {
    get
  }
  public var nrFeaturePoints: Swift.Int {
    get
  }
  public var gender: Swift.Int {
    get
  }
  public var eyeColor: Swift.Int {
    get
  }
  public var hairColor: Swift.Int {
    get
  }
  public var featureMask: Swift.Int {
    get
  }
  public var expression: Swift.Int {
    get
  }
  public var poseAngle: Swift.Int {
    get
  }
  public var poseAngleUncertainty: Swift.Int {
    get
  }
  public var faceImageType: Swift.Int {
    get
  }
  public var imageDataType: Swift.Int {
    get
  }
  public var imageWidth: Swift.Int {
    get
  }
  public var imageHeight: Swift.Int {
    get
  }
  public var imageColorSpace: Swift.Int {
    get
  }
  public var sourceType: Swift.Int {
    get
  }
  public var deviceType: Swift.Int {
    get
  }
  public var quality: Swift.Int {
    get
  }
  public var imageData: [Swift.UInt8] {
    get
  }
  @objc deinit
}
@available(iOS 13.0, *)
public class PassportUtil {
  public var passportNumber: Swift.String
  public var dateOfBirth: Swift.String
  public var expiryDate: Swift.String
  public var passport: IdentifySDK.NFCPassportModel?
  public init()
  public func makeMrzKey(birthDate: Swift.String, expireDate: Swift.String, documentNo: Swift.String) -> Swift.String
  public func getMRZKey() -> Swift.String
  public func calcCheckSum(_ checkString: Swift.String) -> Swift.Int
  @objc deinit
}
extension Foundation.Date {
  public func toString(format: Swift.String = "yyMMdd") -> Swift.String
}
@available(iOS 13, macOS 10.15, *)
public enum DocTypeEnum : Swift.String {
  case TD1
  case TD2
  case OTHER
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class DataGroup1 : IdentifySDK.DataGroup {
  public var elements: [Swift.String : Swift.String] {
    get
  }
  @objc deinit
}
public enum PACEMappingType {
  case GM
  case IM
  case CAM
  public static func == (a: IdentifySDK.PACEMappingType, b: IdentifySDK.PACEMappingType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class PACEInfo : IdentifySDK.SecurityInfo {
  public static let PARAM_ID_GFP_1024_160: Swift.Int
  public static let PARAM_ID_GFP_2048_224: Swift.Int
  public static let PARAM_ID_GFP_2048_256: Swift.Int
  public static let PARAM_ID_ECP_NIST_P192_R1: Swift.Int
  public static let PARAM_ID_ECP_BRAINPOOL_P192_R1: Swift.Int
  public static let PARAM_ID_ECP_NIST_P224_R1: Swift.Int
  public static let PARAM_ID_ECP_BRAINPOOL_P224_R1: Swift.Int
  public static let PARAM_ID_ECP_NIST_P256_R1: Swift.Int
  public static let PARAM_ID_ECP_BRAINPOOL_P256_R1: Swift.Int
  public static let PARAM_ID_ECP_BRAINPOOL_P320_R1: Swift.Int
  public static let PARAM_ID_ECP_NIST_P384_R1: Swift.Int
  public static let PARAM_ID_ECP_BRAINPOOL_P384_R1: Swift.Int
  public static let PARAM_ID_ECP_BRAINPOOL_P512_R1: Swift.Int
  public static let PARAM_ID_ECP_NIST_P521_R1: Swift.Int
  override public func getObjectIdentifier() -> Swift.String
  override public func getProtocolOIDString() -> Swift.String
  public func getVersion() -> Swift.Int
  public func getParameterId() -> Swift.Int?
  public func getParameterSpec() throws -> Swift.Int32
  public func getMappingType() throws -> IdentifySDK.PACEMappingType
  public func getKeyAgreementAlgorithm() throws -> Swift.String
  public func getCipherAlgorithm() throws -> Swift.String
  public func getDigestAlgorithm() throws -> Swift.String
  public func getKeyLength() throws -> Swift.Int
  public func createMappingKey() throws -> Swift.OpaquePointer
  public static func getParameterSpec(stdDomainParam: Swift.Int) throws -> Swift.Int32
  public static func toMappingType(oid: Swift.String) throws -> IdentifySDK.PACEMappingType
  public static func toKeyAgreementAlgorithm(oid: Swift.String) throws -> Swift.String
  public static func toCipherAlgorithm(oid: Swift.String) throws -> Swift.String
  public static func toDigestAlgorithm(oid: Swift.String) throws -> Swift.String
  public static func toKeyLength(oid: Swift.String) throws -> Swift.Int
  @objc deinit
}
@_hasMissingDesignatedInitializers public class FirstRoom : Swift.Codable {
  public var id: Swift.String?
  public var status: Swift.String?
  public var form_uid: Swift.String?
  public var created_at: Swift.String?
  public var created_by: Swift.String?
  public var customer_id: Swift.String?
  public var customer_uid: Swift.String?
  public var language: Swift.String?
  public var sign_language: Swift.String?
  public var liveness: [Swift.Int]?
  public var modules: [Swift.String]?
  public var identification_type: Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class RoomResponse : Swift.Codable {
  public var result: Swift.Bool?
  public var response_status: Swift.Int?
  public var messages: [Swift.String]?
  public var data: IdentifySDK.FirstRoom?
  public var allowed_content_types: Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class EmptyResponse : Swift.Codable {
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class SMSData : Swift.Codable {
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class SmsJson : Swift.Codable {
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class BoolResponse : Swift.Codable {
  public var result: Swift.Bool?
  public var msg: Swift.String?
  public init()
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public class PassportModel {
  public var documentImage: UIKit.UIImage?
  public var documentType: Swift.String
  public var countryCode: Swift.String
  public var surnames: Swift.String
  public var givenNames: Swift.String
  public var documentNumber: Swift.String
  public var nationality: Swift.String
  public var birthDate: Foundation.Date?
  public var sex: Swift.String
  public var expiryDate: Foundation.Date?
  public var personalNumber: Swift.String
  public init()
  public init(documentNumber: Swift.String, birthDate: Foundation.Date, expiryDate: Foundation.Date)
  @objc deinit
}
public class SDKWebError : Swift.Decodable {
  public var errorMessages: Swift.String?
  public init(message: Swift.String)
  @objc deinit
  required public init(from decoder: any Swift.Decoder) throws
}
public class SDKError : Swift.Decodable {
  public var errorMessages: Swift.String?
  public init(message: Swift.String)
  @objc deinit
  required public init(from decoder: any Swift.Decoder) throws
}
public class SDKKpsData : Swift.Decodable {
  public var birthDate: Swift.String?, validDate: Swift.String?, serialNo: Swift.String?
  public init(birthDate: Swift.String, validDate: Swift.String, serialNo: Swift.String)
  @objc deinit
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class IdentifyCompareManager {
  public var face1Maps: [Swift.Double]
  public var face2Maps: [Swift.Double]
  @objc deinit
}
public enum SecureMessagingSupportedAlgorithms {
  case DES
  case AES
  public static func == (a: IdentifySDK.SecureMessagingSupportedAlgorithms, b: IdentifySDK.SecureMessagingSupportedAlgorithms) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13, *)
public class SecureMessaging {
  public init(encryptionAlgorithm: IdentifySDK.SecureMessagingSupportedAlgorithms = .DES, ksenc: [Swift.UInt8], ksmac: [Swift.UInt8], ssc: [Swift.UInt8])
  @objc deinit
}
@available(iOS 13, macOS 10.15, *)
public enum NFCPassportReaderError : Swift.Error {
  case ResponseError(Swift.String, Swift.UInt8, Swift.UInt8)
  case InvalidResponse
  case UnexpectedError
  case NFCNotSupported
  case NoConnectedTag
  case D087Malformed
  case InvalidResponseChecksum
  case MissingMandatoryFields
  case CannotDecodeASN1Length
  case InvalidASN1Value
  case UnableToProtectAPDU
  case UnableToUnprotectAPDU
  case UnsupportedDataGroup
  case DataGroupNotRead
  case UnknownTag
  case UnknownImageFormat
  case NotImplemented
  case TagNotValid
  case ConnectionError
  case UserCanceled
  case InvalidMRZKey
  case MoreThanOneTagFound
  case InvalidHashAlgorithmSpecified
  case InvalidDataPassed(Swift.String)
  case NotYetSupported(Swift.String)
}
@available(iOS 13, macOS 10.15, *)
extension IdentifySDK.NFCPassportReaderError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
@available(iOS 13, macOS 10.15, *)
public enum OpenSSLError : Swift.Error {
  case UnableToGetX509CertificateFromPKCS7(Swift.String)
  case UnableToVerifyX509CertificateForSOD(Swift.String)
  case VerifyAndReturnSODEncapsulatedData(Swift.String)
  case UnableToReadECPublicKey(Swift.String)
  case UnableToExtractSignedDataFromPKCS7(Swift.String)
  case VerifySignedAttributes(Swift.String)
  case UnableToParseASN1(Swift.String)
  case UnableToDecryptRSASignature(Swift.String)
}
@available(iOS 13, macOS 10.15, *)
extension IdentifySDK.OpenSSLError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
public enum PassiveAuthenticationError : Swift.Error {
  case UnableToParseSODHashes(Swift.String)
  case InvalidDataGroupHash(Swift.String)
  case SODMissing(Swift.String)
}
extension IdentifySDK.PassiveAuthenticationError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
@_hasMissingDesignatedInitializers public class SDKNetwork {
  public var BASE_URL: Swift.String
  public var timeoutIntervalForRequest: Swift.Int
  public var timeoutIntervalForResource: Swift.Int
  public var useSSLPinning: Swift.Bool
  public func connectToRoom(identId: Swift.String, callback: @escaping ((_ results: IdentifySDK.RoomResponse, _ errors: IdentifySDK.SDKWebError?) -> Swift.Void))
  public func verifySms(tid: Swift.String, tan: Swift.String, callback: @escaping ((_ results: IdentifySDK.EmptyResponse) -> Swift.Void))
  public func sendIDCardOcrData(model: IdentifySDK.IDCardRaw, callback: @escaping ((_ results: IdentifySDK.BoolResponse) -> Swift.Void))
  public func uploadAddressInfo(image: Swift.String, addressText: Swift.String, callback: @escaping ((_ results: IdentifySDK.BoolResponse) -> Swift.Void))
  public func uploadVideo(videoData: Foundation.Data, callback: @escaping ((_ results: IdentifySDK.BoolResponse?, _ errors: IdentifySDK.SDKWebError?) -> Swift.Void))
  public func showAlert(msg: Swift.String)
  @objc deinit
}
extension Swift.Encodable {
  public func asDictionary() -> [Swift.String : Any]
}
extension UIKit.UIImage {
  public func toBase64() -> Swift.String?
}
@_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class SecurityInfo {
  public func getObjectIdentifier() -> Swift.String
  public func getProtocolOIDString() -> Swift.String
  @objc deinit
}
@available(iOS 13, macOS 10.15, *)
public enum NFCViewDisplayMessage {
  case requestPresentPassport
  case authenticatingWithPassport(Swift.Int)
  case readingDataGroupProgress(IdentifySDK.DataGroupId, Swift.Int)
  case error(IdentifySDK.NFCPassportReaderError)
  case successfulRead
}
@available(iOS 13, macOS 10.15, *)
extension IdentifySDK.NFCViewDisplayMessage {
  public var description: Swift.String {
    get
  }
}
public enum LogLevel : Swift.Int, Swift.CaseIterable {
  case verbose
  case debug
  case info
  case warning
  case error
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [IdentifySDK.LogLevel]
  public typealias RawValue = Swift.Int
  public static var allCases: [IdentifySDK.LogLevel] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class Log {
  public static var logLevel: IdentifySDK.LogLevel
  public static var storeLogs: Swift.Bool
  public static var logData: [Swift.String]
  public class func verbose(_ msg: @autoclosure () -> Swift.String)
  public class func debug(_ msg: @autoclosure () -> Swift.String)
  public class func info(_ msg: @autoclosure () -> Swift.String)
  public class func warning(_ msg: @autoclosure () -> Swift.String)
  public class func error(_ msg: @autoclosure () -> Swift.String)
  public class func clearStoredLogs()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class AlertViewManager : ObjectiveC.NSObject {
  public class var defaultManager: IdentifySDK.AlertViewManager {
    get
  }
  public func showOkAlert(_ title: Swift.String?, message: Swift.String?, handler: ((UIKit.UIAlertAction) -> Swift.Void)?)
  public func showErrorAlert(error: any Swift.Error)
  public func showLogoutAlert()
  public func showOfflineAlert()
  @objc override dynamic public init()
  @objc deinit
}
@available(iOS 13, macOS 10.15, *)
public enum DataGroupId : Swift.Int, Swift.CaseIterable {
  case COM
  case DG1
  case DG2
  case DG3
  case DG4
  case DG5
  case DG6
  case DG7
  case DG8
  case DG9
  case DG10
  case DG11
  case DG12
  case DG13
  case DG14
  case DG15
  case DG16
  case SOD
  case Unknown
  public func getName() -> Swift.String
  public static func getIDFromName(name: Swift.String) -> IdentifySDK.DataGroupId
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [IdentifySDK.DataGroupId]
  public typealias RawValue = Swift.Int
  public static var allCases: [IdentifySDK.DataGroupId] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class Steps : Swift.Codable {
  public var nfc: Swift.Bool?
  public var liveness: Swift.Bool?
  public var idFront: Swift.Bool?
  public var idBack: Swift.Bool?
  public var video: Swift.Bool?
  public var signature: Swift.Bool?
  public var speech: Swift.Bool?
  public var selfie: Swift.Bool?
  public var language: Swift.String?
  public var sign_language: Swift.Bool?
  public var verifyAddress: Swift.Bool?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
extension UIKit.UIDevice {
  @_Concurrency.MainActor(unsafe) public var modelName: Swift.String {
    get
  }
}
public class IDCardRaw : Swift.Codable {
  public init(identId: Swift.String?, serialNo: Swift.String?, expireDate: Swift.String?, rawData: Swift.String?, birthdate: Swift.String?)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public class IdentifyCard : Swift.Codable {
  public var ident_id: Swift.String?
  public var name: Swift.String?
  public var surname: Swift.String?
  public var personalNumber: Swift.String?
  public var birthDate: Swift.String?
  public var expireDate: Swift.String?
  public var serialNumber: Swift.String?
  public var nationality: Swift.String?
  public var docType: Swift.String?
  public var authority: Swift.String?
  public var gender: Swift.String?
  public var image: Swift.String?
  public var mrzInfo: Swift.String?
  public var activeAuth: Swift.Bool?
  public var passiveAuth: Swift.Bool?
  public var address: Swift.String?
  public init(ident_id: Swift.String?, name: Swift.String?, surname: Swift.String?, personalNumber: Swift.String?, birthdate: Swift.String?, expireDate: Swift.String?, serialNumber: Swift.String?, nationality: Swift.String?, docType: Swift.String?, authority: Swift.String?, gender: Swift.String?, image: Swift.String?, mrzInfo: Swift.String?, activeAuth: Swift.Bool?, passiveAuth: Swift.Bool?, address: Swift.String?)
  public init()
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public class FrontIdInfo : Swift.Codable {
  public var idTcknOcr: Swift.String?, idSurnameOcr: Swift.String?, idNameOcr: Swift.String?, idBirthDateOcr: Swift.String?, idSerialNoOcr: Swift.String?, idValidUntilOcr: Swift.String?
  public init()
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public class BackIdInfo : Swift.Codable {
  public var idSurnameMRZ: Swift.String?, idNameMRZ: Swift.String?, idMotherNameOcr: Swift.String?, idFatherNameOcr: Swift.String?, idIssuedByOcr: Swift.String?, mrzLine: Swift.String?, idTcknMRZ: Swift.String?, idDocumentNumberMRZ: Swift.String?, idBirthDateMRZ: Swift.String?, idValidDateMRZ: Swift.String?, idTypeMRZ: Swift.String?, idGenderMRZ: Swift.String?
  public init()
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public class FinalIdCard : Swift.Codable {
  public var frontCard: IdentifySDK.FrontIdInfo?
  public var backCard: IdentifySDK.BackIdInfo?
  public var nfcIdCard: IdentifySDK.IdentifyCard?
  public init()
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public class AutoIdentStatus : Swift.Codable {
  public var identCompleteStatus: Swift.Bool?
  public var errorMessages: [Swift.String]?
  public init()
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public func binToHexRep(_ val: [Swift.UInt8], asArray: Swift.Bool = false) -> Swift.String
public func binToHexRep(_ val: Swift.UInt8) -> Swift.String
public func binToHex(_ val: Swift.UInt8) -> Swift.Int
public func binToHex(_ val: [Swift.UInt8]) -> Swift.UInt64
public func binToHex(_ val: Swift.ArraySlice<Swift.UInt8>) -> Swift.UInt64
public func hexToBin(_ val: Swift.UInt64) -> [Swift.UInt8]
public func binToInt(_ val: Swift.ArraySlice<Swift.UInt8>) -> Swift.Int
public func binToInt(_ val: [Swift.UInt8]) -> Swift.Int
public func intToBin(_ data: Swift.Int, pad: Swift.Int = 2) -> [Swift.UInt8]
public func hexRepToBin(_ val: Swift.String) -> [Swift.UInt8]
public func xor(_ kifd: [Swift.UInt8], _ response_kicc: [Swift.UInt8]) -> [Swift.UInt8]
public func generateRandomUInt8Array(_ size: Swift.Int) -> [Swift.UInt8]
public func pad(_ toPad: [Swift.UInt8], blockSize: Swift.Int) -> [Swift.UInt8]
public func unpad(_ tounpad: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func mac(algoName: IdentifySDK.SecureMessagingSupportedAlgorithms, key: [Swift.UInt8], msg: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func desMAC(key: [Swift.UInt8], msg: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func aesMAC(key: [Swift.UInt8], msg: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func wrapDO(b: Swift.UInt8, arr: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func unwrapDO(tag: Swift.UInt8, wrappedData: [Swift.UInt8]) throws -> [Swift.UInt8]
public func intToBytes(val: Swift.Int, removePadding: Swift.Bool) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func oidToBytes(oid: Swift.String, replaceTag: Swift.Bool) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func asn1Length(_ data: Swift.ArraySlice<Swift.UInt8>) throws -> (Swift.Int, Swift.Int)
@available(iOS 13, macOS 10.15, *)
public func asn1Length(_ data: [Swift.UInt8]) throws -> (Swift.Int, Swift.Int)
@available(iOS 13, macOS 10.15, *)
public func toAsn1Length(_ data: Swift.Int) throws -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func calcHash(data: [Swift.UInt8], hashAlgorithm: Swift.String) throws -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func calcSHA1Hash(_ data: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func calcSHA224Hash(_ data: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func calcSHA256Hash(_ data: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func calcSHA512Hash(_ data: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func calcSHA384Hash(_ data: [Swift.UInt8]) -> [Swift.UInt8]
@_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class ChipAuthenticationPublicKeyInfo : IdentifySDK.SecurityInfo {
  override public func getObjectIdentifier() -> Swift.String
  override public func getProtocolOIDString() -> Swift.String
  public func getKeyId() -> Swift.Int
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class OpenSSLUtils {
  public static func getOpenSSLError() -> Swift.String
  @available(iOS 13, macOS 10.15, *)
  public static func getPublicKeyData(from key: Swift.OpaquePointer) -> [Swift.UInt8]?
  @available(iOS 13, macOS 10.15, *)
  public static func decodePublicKeyFromBytes(pubKeyData: [Swift.UInt8], params: Swift.OpaquePointer) -> Swift.OpaquePointer?
  public static func computeSharedSecret(privateKeyPair: Swift.OpaquePointer, publicKey: Swift.OpaquePointer) -> [Swift.UInt8]
  @objc deinit
}
@available(iOS 13, macOS 10.15, *)
public func AESEncrypt(key: [Swift.UInt8], message: [Swift.UInt8], iv: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func AESDecrypt(key: [Swift.UInt8], message: [Swift.UInt8], iv: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func AESECBEncrypt(key: [Swift.UInt8], message: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func tripleDESEncrypt(key: [Swift.UInt8], message: [Swift.UInt8], iv: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func tripleDESDecrypt(key: [Swift.UInt8], message: [Swift.UInt8], iv: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func DESEncrypt(key: [Swift.UInt8], message: [Swift.UInt8], iv: [Swift.UInt8], options: Swift.UInt32 = 0) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func DESDecrypt(key: [Swift.UInt8], message: [Swift.UInt8], iv: [Swift.UInt8], options: Swift.UInt32 = 0) -> [Swift.UInt8]
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class DataGroup7 : IdentifySDK.DataGroup {
  public var imageData: [Swift.UInt8] {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class ActiveAuthenticationInfo : IdentifySDK.SecurityInfo {
  override public func getObjectIdentifier() -> Swift.String
  override public func getProtocolOIDString() -> Swift.String
  public func getSignatureAlgorithmOIDString() -> Swift.String?
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class COM : IdentifySDK.DataGroup {
  public var version: Swift.String {
    get
  }
  public var unicodeVersion: Swift.String {
    get
  }
  public var dataGroupsPresent: [Swift.String] {
    get
  }
  @objc deinit
}
@available(iOS 13, macOS 10.15, *)
public struct DataGroupHash {
  public var id: Swift.String
  public var sodHash: Swift.String
  public var computedHash: Swift.String
  public var match: Swift.Bool
}
@_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class CardAccess {
  public var securityInfos: [IdentifySDK.SecurityInfo] {
    get
  }
  @objc deinit
}
@available(iOS 13, *)
public class BACHandler {
  public var ksenc: [Swift.UInt8]
  public var ksmac: [Swift.UInt8]
  public var kifd: [Swift.UInt8]
  public init()
  public init(tagReader: IdentifySDK.TagReader)
  public func performBACAndGetSessionKeys(mrzKey: Swift.String, completed: @escaping (_ error: IdentifySDK.NFCPassportReaderError?) -> ())
  public func sessionKeys(data: [Swift.UInt8]) throws -> ([Swift.UInt8], [Swift.UInt8], [Swift.UInt8])
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class DataGroup14 : IdentifySDK.DataGroup {
  public var securityInfos: [IdentifySDK.SecurityInfo] {
    get
  }
  @objc deinit
}
@available(iOS 13, macOS 10.15, *)
public class ASN1Item : Swift.CustomDebugStringConvertible {
  public init(line: Swift.String)
  public func getChild(_ child: Swift.Int) -> IdentifySDK.ASN1Item?
  public func getNumberOfChildren() -> Swift.Int
  public var debugDescription: Swift.String {
    get
  }
  @objc deinit
}
@available(iOS 13, macOS 10.15, *)
public class SimpleASN1DumpParser {
  public init()
  public func parse(data: Foundation.Data) throws -> IdentifySDK.ASN1Item
  public func test()
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 13, *)
public class IdentifyManager {
  public var queueStatsInfo: (order: Swift.String, min: Swift.String)
  public var subRejectedStatus: Swift.Bool
  public static let shared: IdentifySDK.IdentifyManager
  public var userToken: Swift.String
  public var webModuleList: [Swift.String]?
  public var livenessRandomOrder: [Swift.Int]?
  public var sdkFrontInfo: IdentifySDK.FrontIdInfo
  public var sdkBackInfo: IdentifySDK.BackIdInfo
  public var sdkNfcInfo: IdentifySDK.IdentifyCard
  public var webRTCClient: IdentifySDK.WebRTCClient!
  public var sdkSocketActions: IdentifySDK.SDKCallActions?
  public var socket: Starscream.WebSocket!
  weak public var delegate: (any IdentifySDK.IdentifyListenerDelegate)?
  weak public var appListenerDelegate: (any IdentifySDK.IdentifyManagerListener)?
  weak public var socketMessageListener: (any IdentifySDK.SDKSocketListener)?
  public var loginModuleController: UIKit.UIViewController
  public var selfieModuleController: UIKit.UIViewController
  public var idCardModuleController: UIKit.UIViewController
  public var nfcModuleController: UIKit.UIViewController
  public var livenessModuleController: UIKit.UIViewController
  public var videoRecorderModuleController: UIKit.UIViewController
  public var signatureModuleController: UIKit.UIViewController
  public var speechModuleController: UIKit.UIViewController
  public var addressModuleController: UIKit.UIViewController
  public var liveStreamModuleController: UIKit.UIViewController
  public var thankYouViewController: UIKit.UIViewController
  public var modulesControllersArray: [UIKit.UIViewController]
  public var manipulatedModulesControllersArray: [UIKit.UIViewController]
  public var moduleStepOrder: Swift.Int
  public var mrzBirthDay: Swift.String
  public var mrzDocNo: Swift.String
  public var mrzValidDate: Swift.String
  public var face1Maps: [Swift.Double]
  public var face2Maps: [Swift.Double]
  public var connectToSignLang: Swift.Bool
  public var allowedNfcMaxErrorCount: Swift.Int
  public var allowedCardType: [IdentifySDK.CardType]
  public var selectedCardType: IdentifySDK.CardType?
  public var isSelfIdent: Swift.Bool
  public var useKpsData: Swift.Bool
  public var isSelfieIdent: Swift.Bool
  public var jailBreakStatus: Swift.Bool
  public var sdkLang: IdentifySDK.SDKLang?
  public func setSDKLang(lang: IdentifySDK.SDKLang? = .eng)
  public func setupSDK(identId: Swift.String, baseApiUrl: Swift.String, stunServers: [Swift.String], stunUser: Swift.String, stunPass: Swift.String, webSocketUrl: Swift.String, networkOptions: IdentifySDK.SDKNetworkOptions, kpsData: IdentifySDK.SDKKpsData?, identCardType: [IdentifySDK.CardType]? = [.idCard, .passport, .oldSchool], signLangSupport: Swift.Bool, nfcMaxErrorCount: Swift.Int, logLevel: IdentifySDK.SDKLogLevel? = .all, callback: @escaping (Starscream.WebSocket, IdentifySDK.RoomResponse, IdentifySDK.SDKWebError?) -> ())
  public func getNextLivenessTest(callBack: @escaping (_ nextStep: IdentifySDK.LivenessTestStep?, _ completed: Swift.Bool?) -> ())
  public func getNextModule(callback: @escaping (UIKit.UIViewController) -> ())
  public func reconnectToSocket(callback: @escaping (Starscream.WebSocket) -> ())
  public func startRemoteNFC(birthDate: Swift.String, validDate: Swift.String, docNo: Swift.String)
  public func startNFC(callback: @escaping (IdentifySDK.IdentifyCard?, IdentifySDK.AutoIdentStatus, IdentifySDK.BoolResponse, (any Swift.Error)?) -> ())
  public func sendSpeechStatus(isCompleted: Swift.Bool?)
  public func twoFacesCompare(callback: @escaping (Swift.Double, Swift.Bool, (any Swift.Error)?) -> ())
  public func startBackIdOcr(frontImg: UIKit.UIImage, callback: @escaping (IdentifySDK.BackIdInfo, IdentifySDK.SDKError?) -> ())
  public func startFrontIdOcr(frontImg: UIKit.UIImage, callback: @escaping (IdentifySDK.FrontIdInfo, IdentifySDK.SDKError?) -> ())
  public func checkAutoIdentStatus() -> IdentifySDK.AutoIdentStatus
  public func detectHumanFace(comingPhoto: UIKit.UIImage, callback: @escaping (Swift.Bool) -> ())
  public func uploadAddressInfo(invoicePhoto: UIKit.UIImage, addressText: Swift.String, callback: @escaping (Swift.Bool, IdentifySDK.SDKWebError?) -> ())
  public func uploadIdPhoto(idPhoto: UIKit.UIImage, selfieType: IdentifySDK.OCRType = .frontId, callback: @escaping (IdentifySDK.BoolResponse) -> ())
  public func upload5SecVideo(videoData: Foundation.Data, callback: @escaping (IdentifySDK.BoolResponse?, IdentifySDK.SDKWebError?) -> ())
  public func acceptCall(callback: @escaping (_ connected: Swift.Bool?, _ errMsg: IdentifySDK.SDKError?, _ sdpOk: Swift.Bool?) -> ())
  public func remoteCam() -> UIKit.UIView
  public func myCam() -> UIKit.UIView
  public func sendStep()
  public func speechCompleted()
  @objc deinit
}
extension IdentifySDK.IdentifyManager : Starscream.WebSocketDelegate {
  public func websocketDidConnect(socket: any Starscream.WebSocketClient)
  public func websocketDidDisconnect(socket: any Starscream.WebSocketClient, error: (any Swift.Error)?)
  public func websocketDidReceiveMessage(socket: any Starscream.WebSocketClient, text: Swift.String)
  public func websocketDidReceiveData(socket: any Starscream.WebSocketClient, data: Foundation.Data)
  public func smsVerification(tan: Swift.String, callback: @escaping (Swift.Bool) -> ())
  public func sendImOnline(socket: any Starscream.WebSocketClient)
}
@objc @available(iOS 13, *)
public class PassportReader : ObjectiveC.NSObject {
  public var passiveAuthenticationUsesOpenSSL: Swift.Bool
  public init(logLevel: IdentifySDK.LogLevel = .error, masterListURL: Foundation.URL? = nil)
  public func setMasterListURL(_ masterListURL: Foundation.URL)
  public func overrideNFCDataAmountToRead(amount: Swift.Int)
  public func readPassport(mrzKey: Swift.String, tags: [IdentifySDK.DataGroupId] = [], skipSecureElements: Swift.Bool = true, skipCA: Swift.Bool = false, skipPACE: Swift.Bool = false, customDisplayMessage: ((IdentifySDK.NFCViewDisplayMessage) -> Swift.String?)? = nil, completed: @escaping (IdentifySDK.NFCPassportModel?, IdentifySDK.NFCPassportReaderError?) -> ())
  @objc deinit
}
@available(iOS 13, *)
extension IdentifySDK.PassportReader : CoreNFC.NFCTagReaderSessionDelegate {
  public func tagReaderSessionDidBecomeActive(_ session: CoreNFC.NFCTagReaderSession)
  public func tagReaderSession(_ session: CoreNFC.NFCTagReaderSession, didInvalidateWithError error: any Swift.Error)
  public func tagReaderSession(_ session: CoreNFC.NFCTagReaderSession, didDetect tags: [CoreNFC.NFCTag])
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class WebRTCClient : ObjectiveC.NSObject, WebRTC.RTCPeerConnectionDelegate, WebRTC.RTCVideoViewDelegate, WebRTC.RTCDataChannelDelegate {
  public var isConnected: Swift.Bool {
    get
  }
  public func localVideoView() -> UIKit.UIView
  public func remoteVideoView() -> UIKit.UIView
  @objc deinit
  public func setupLocalViewFrame(frame: CoreFoundation.CGRect)
  public func setupRemoteViewFrame(frame: CoreFoundation.CGRect)
  public func switchCameraPosition()
}
extension IdentifySDK.WebRTCClient {
  @objc dynamic public func peerConnection(_ peerConnection: WebRTC.RTCPeerConnection, didChange stateChanged: WebRTC.RTCSignalingState)
  @objc dynamic public func peerConnection(_ peerConnection: WebRTC.RTCPeerConnection, didChange newState: WebRTC.RTCIceConnectionState)
  @objc dynamic public func peerConnection(_ peerConnection: WebRTC.RTCPeerConnection, didAdd stream: WebRTC.RTCMediaStream)
  @objc dynamic public func peerConnection(_ peerConnection: WebRTC.RTCPeerConnection, didGenerate candidate: WebRTC.RTCIceCandidate)
  @objc dynamic public func peerConnection(_ peerConnection: WebRTC.RTCPeerConnection, didRemove stream: WebRTC.RTCMediaStream)
  @objc dynamic public func peerConnection(_ peerConnection: WebRTC.RTCPeerConnection, didOpen dataChannel: WebRTC.RTCDataChannel)
  @objc dynamic public func peerConnection(_ peerConnection: WebRTC.RTCPeerConnection, didRemove candidates: [WebRTC.RTCIceCandidate])
  @objc dynamic public func peerConnectionShouldNegotiate(_ peerConnection: WebRTC.RTCPeerConnection)
  @objc dynamic public func peerConnection(_ peerConnection: WebRTC.RTCPeerConnection, didChange newState: WebRTC.RTCIceGatheringState)
}
extension IdentifySDK.WebRTCClient {
  public func calculateLocalSize()
  @objc dynamic public func videoView(_ videoView: any WebRTC.RTCVideoRenderer, didChangeVideoSize size: CoreFoundation.CGSize)
}
extension IdentifySDK.WebRTCClient {
  @objc dynamic public func dataChannel(_ dataChannel: WebRTC.RTCDataChannel, didReceiveMessageWith buffer: WebRTC.RTCDataBuffer)
  @objc dynamic public func dataChannelDidChangeState(_ dataChannel: WebRTC.RTCDataChannel)
}
@_hasMissingDesignatedInitializers public class IdentifyOCRManager {
  @objc deinit
}
@available(iOS 13, macOS 10.15, *)
public enum CertificateType {
  case documentSigningCertificate
  case issuerSigningCertificate
  public static func == (a: IdentifySDK.CertificateType, b: IdentifySDK.CertificateType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13, macOS 10.15, *)
public enum CertificateItem : Swift.String {
  case fingerprint
  case issuerName
  case subjectName
  case serialNumber
  case signatureAlgorithm
  case publicKeyAlgorithm
  case notBefore
  case notAfter
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@available(iOS 13, macOS 10.15, *)
public class X509Wrapper {
  final public let cert: Swift.OpaquePointer
  public init?(with cert: Swift.OpaquePointer?)
  public func getItemsAsDict() -> [IdentifySDK.CertificateItem : Swift.String]
  public func certToPEM() -> Swift.String
  public func getFingerprint() -> Swift.String?
  public func getNotBeforeDate() -> Swift.String?
  public func getNotAfterDate() -> Swift.String?
  public func getSerialNumber() -> Swift.String?
  public func getSignatureAlgorithm() -> Swift.String?
  public func getPublicKeyAlgorithm() -> Swift.String?
  public func getIssuerName() -> Swift.String?
  public func getSubjectName() -> Swift.String?
  @objc deinit
}
extension IdentifySDK.UploadImgType : Swift.Equatable {}
extension IdentifySDK.UploadImgType : Swift.Hashable {}
extension IdentifySDK.UploadImgType : Swift.RawRepresentable {}
extension IdentifySDK.OCRType : Swift.Equatable {}
extension IdentifySDK.OCRType : Swift.Hashable {}
extension IdentifySDK.OCRType : Swift.RawRepresentable {}
extension IdentifySDK.AppType : Swift.Equatable {}
extension IdentifySDK.AppType : Swift.Hashable {}
extension IdentifySDK.AppType : Swift.RawRepresentable {}
extension IdentifySDK.SDKType : Swift.Equatable {}
extension IdentifySDK.SDKType : Swift.Hashable {}
extension IdentifySDK.SDKType : Swift.RawRepresentable {}
extension IdentifySDK.HostType : Swift.Equatable {}
extension IdentifySDK.HostType : Swift.Hashable {}
extension IdentifySDK.HostType : Swift.RawRepresentable {}
extension IdentifySDK.SdkModules : Swift.Equatable {}
extension IdentifySDK.SdkModules : Swift.Hashable {}
extension IdentifySDK.SdkModules : Swift.RawRepresentable {}
extension IdentifySDK.SelfieTypes : Swift.Equatable {}
extension IdentifySDK.SelfieTypes : Swift.Hashable {}
extension IdentifySDK.SelfieTypes : Swift.RawRepresentable {}
extension IdentifySDK.AppQuitType : Swift.Equatable {}
extension IdentifySDK.AppQuitType : Swift.Hashable {}
extension IdentifySDK.AppQuitType : Swift.RawRepresentable {}
extension IdentifySDK.SDKLogLevel : Swift.Equatable {}
extension IdentifySDK.SDKLogLevel : Swift.Hashable {}
extension IdentifySDK.SDKLogLevel : Swift.RawRepresentable {}
extension IdentifySDK.VerificationCardType : Swift.Equatable {}
extension IdentifySDK.VerificationCardType : Swift.Hashable {}
extension IdentifySDK.VerificationCardType : Swift.RawRepresentable {}
extension IdentifySDK.SDKLang : Swift.Equatable {}
extension IdentifySDK.SDKLang : Swift.Hashable {}
extension IdentifySDK.SDKLang : Swift.RawRepresentable {}
extension IdentifySDK.CardType : Swift.Equatable {}
extension IdentifySDK.CardType : Swift.Hashable {}
extension IdentifySDK.CardType : Swift.RawRepresentable {}
extension IdentifySDK.LivenessTestStep : Swift.Equatable {}
extension IdentifySDK.LivenessTestStep : Swift.Hashable {}
extension IdentifySDK.LivenessTestStep : Swift.RawRepresentable {}
extension IdentifySDK.PassportAuthenticationStatus : Swift.Equatable {}
extension IdentifySDK.PassportAuthenticationStatus : Swift.Hashable {}
@available(iOS 13, macOS 10.15, *)
extension IdentifySDK.DocTypeEnum : Swift.Equatable {}
@available(iOS 13, macOS 10.15, *)
extension IdentifySDK.DocTypeEnum : Swift.Hashable {}
@available(iOS 13, macOS 10.15, *)
extension IdentifySDK.DocTypeEnum : Swift.RawRepresentable {}
extension IdentifySDK.PACEMappingType : Swift.Equatable {}
extension IdentifySDK.PACEMappingType : Swift.Hashable {}
extension IdentifySDK.SecureMessagingSupportedAlgorithms : Swift.Equatable {}
extension IdentifySDK.SecureMessagingSupportedAlgorithms : Swift.Hashable {}
extension IdentifySDK.LogLevel : Swift.Equatable {}
extension IdentifySDK.LogLevel : Swift.Hashable {}
extension IdentifySDK.LogLevel : Swift.RawRepresentable {}
@available(iOS 13, macOS 10.15, *)
extension IdentifySDK.DataGroupId : Swift.Equatable {}
@available(iOS 13, macOS 10.15, *)
extension IdentifySDK.DataGroupId : Swift.Hashable {}
@available(iOS 13, macOS 10.15, *)
extension IdentifySDK.DataGroupId : Swift.RawRepresentable {}
@available(iOS 13, macOS 10.15, *)
extension IdentifySDK.CertificateType : Swift.Equatable {}
@available(iOS 13, macOS 10.15, *)
extension IdentifySDK.CertificateType : Swift.Hashable {}
@available(iOS 13, macOS 10.15, *)
extension IdentifySDK.CertificateItem : Swift.Equatable {}
@available(iOS 13, macOS 10.15, *)
extension IdentifySDK.CertificateItem : Swift.Hashable {}
@available(iOS 13, macOS 10.15, *)
extension IdentifySDK.CertificateItem : Swift.RawRepresentable {}
